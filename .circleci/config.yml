version: 2.1
orbs: 
  slack: circleci/slack@4.8.2

commands:
  destroy-environment:
    description: Destroy backend and frontend cloudformation stacks.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
              aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
            

  revert-migrations:
    description: Revert the last migration .
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/E9562W5U3YjbDVEsHjUzgk/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert              
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          command: |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          command: |
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical 

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --tags project=udapeople \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
              echo [web] > ~/inventory.txt
              aws ec2 describe-instances \
                  --query 'Reservations[*].Instances[*].PublicIpAddress' \
                  --output text >> ~/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
        - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
                fingerprints: ["21:c1:3f:ef:e0:99:d3:3d:fb:90:ea:13:07:ad:7f:7e"]
      - attach_workspace:
            at: ~/      
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible tar gzip
            pip install awscli
      - run:
          name: Run Playbook and Configure server
          command: |
            # set environment variables:
            echo NODE_ENV=production > ~/project/backend/.env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ~/project/backend/.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ~/project/backend/.env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ~/project/backend/.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> ~/project/backend/.env
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ~/project/backend/.env
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ~/project/backend/.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ~/project/backend/.env
            echo TYPEORM_PORT=5432 >> ~/project/backend/.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ~/project/backend/.env

            cat ~/project/backend/.env
            cat ~/inventory.txt
           
            ansible-playbook -i ~/inventory.txt .circleci/ansible/configure-server.yml
      - run:
          name: Install node-explorer
          command: |
            ansible-playbook -i ~/inventory.txt .circleci/ansible/configure-prometheus-node-exporter.yml

      - destroy-environment     

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations:revert
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
      - run:
          name: print ~/project/backend/migrations_dump.txt file
          command: |
            cat ~/project/backend/migrations_dump.txt

      - run:
          name: Send migration results to kvdb.io 
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                curl -k https://kvdb.io/E9562W5U3YjbDVEsHjUzgk/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environment  
      - revert-migrations

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip 
      - attach_workspace:
            at: ~/      
      - run:
          name: Install dependencies 1
          command: |
              cat /etc/*release
              curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
              yum -y install nodejs
              # npm install -g npm
              # npm install oauth2
              # npm install webpack
      - run:
          name: Get backend url
          command: |
              export BACKEND_IP=$(aws ec2 describe-instances \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --output=text)
              export API_URL="http://${BACKEND_IP}:3030"
              echo "API_URL=${API_URL}"
              echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
              echo ENVIRONMENT=production >> "frontend/.env"
              echo NODE_ENV=production >> "frontend/.env"
              cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
              cd frontend
              npm install
              npm install webpack -g
              npm install -D webpack-cli
              npm run build
              tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
              aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive        
      - destroy-environment  
      - revert-migrations

  deploy-backend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip 
      - attach_workspace:
            at: ~/      
      - run:
          name: Install dependencies
          command: |
              curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
              yum -y install nodejs
      - run:
          name: Install awscli and ansible
          command: |
              yum install -y awscli
              amazon-linux-extras install epel -y
              yum update -y
              yum install -y ansible
      - run:
          name: Deploy backend
          command: |
              cd backend
              npm i
              npm run build
              cd ..
              # zip backend
              tar -C backend -czvf artifact.tar.gz .
              ls -l artifact.tar.gz
              pwd
              ansible-playbook -i ~/inventory.txt ~/project/.circleci/ansible/deploy-backend.yml
      - destroy-environment  
      - revert-migrations

  smoke-test:
    docker:
      - image: python:3.10-alpine3.16
    steps:
      - checkout
      - run: 
          name: Install dependencies
          command: |
            apk add --update --no-cache aws-cli curl tar gzip nodejs npm
      - attach_workspace:
            at: ~/ 
      - run:
          name: print inventory.txt from workspace
          command: |
            cat ~/inventory.txt
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL=http://${BACKEND_IP}:3030
            echo Backend URL: ${API_URL}/api/status
            sleep 60
            curl -v $API_URL
            if curl -s $API_URL/api/status | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
              echo ${URL} 
              if curl -s ${URL} | grep "Welcome"
              then
                  # Change this to 0 after the job fails
                return 0
              else
                return 1
              fi
      - destroy-environment
      - revert-migrations

  cloudfront-update:
    docker:
      - image: python:3.10-alpine3.16
    steps:
      - checkout
      - run: 
          name: Install dependencies
          command: |
            apk add --update --no-cache aws-cli curl tar gzip nodejs npm
      - attach_workspace:
            at: ~/     
      - run:
          name: Save Old Workflow ID to kvdb.io
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation \
                      list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                      --no-paginate --output text)
            echo "Old Wokflow ID: $OLD_WORKFLOW_ID"
            curl https://kvdb.io/${KVDB_BUCKET}/old_workflow_id -d "${OLD_WORKFLOW_ID}"
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name InitialStack
      - destroy-environment
      - revert-migrations
      # - persist_to_workspace:
      #     root: ~/
      #     paths:
      #       - OldWorkflowID.txt

      # - destroy-environment
      # - revert-migrations

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
            at: ~/     
      - run:
          name: Get old stack workflow id
          command: |
              # export OldWorkflowID=$(aws cloudformation \
              # list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              # --no-paginate --output text)

              export OldWorkflowID=$(cat ~/OldWorkflowID.txt)
              echo OldWorkflowID "${OldWorkflowID}"
              echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"

              # Fetch the stack names          
              # export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              # --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
              # echo Stack names: "${STACKS[@]}" 
      - run:
          name: Remove old stacks and files
          command: |
              export OldWorkflowID=$(cat ~/OldWorkflowID.txt)
              echo OldWorkflowID "${OldWorkflowID}"
              echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"

              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              echo "Deleted old frontend s3 files: s3://udapeople-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              echo "Deleted old backend stack: udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              echo "Deleted old frontend stack: udapeople-frontend-${OldWorkflowID}"

        


workflows:
  default:
    jobs:
      - build-frontend:
          context:
            - slack-secrets   
      - build-backend:
          context:
            - slack-secrets
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]       
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]    
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
